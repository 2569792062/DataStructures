# for a in range(1,1000):
#     for b in range(1,1000):
#         for c in range(1,1000):
#             if a+c+b==1000 and a**2+b**2==c**2:
#                 print(a,b,c)


# for a in range(0,1001):
#     for b in range(0,1001):
#         c=1000-b-a
#         if a**2+b**2==c**2:
#             print(a,b,c)



"""
1.什么是算法
  算法是独立存在的一种解决问题的方法和思想
2.算法的五大特性
  输入：算法有0个或者多个输入
  输出：算法至少一个输出
  有穷性：算法在有限的步骤之后会自动结束而不会无限循环
  并且每一个步骤可以在可接受的时间内完成。
  确定性：算法中的每一步都有确定的含义，不会出现二义性。
  可行性：算法的每一步都是可行的，每一步都能够执行有限的次数完成。
3.算法效率衡量
  实现算法程序的执行时间可以反映出来算法的效率。
  单纯依靠运行时间来比较算法的优劣不一定是客观准确的，程序的运行离不开计算机环境，所以和硬件操作系统有关。
4.依靠算法用什么去衡量
  时间复杂度
5.表示法：大O记法
  O（n**3）
  O（n**2）
6.时间复杂度分类
  最优时间复杂度：算法完成工作最少需要多少基本操作（过于理想化，无意义）
  最坏时间复杂度：算法完成工作最多需要多少基本操作（提供保证，表明算法在此程度的基本操作中一定完成工作）
  平均时间复杂度：算法完成工作平均需要多少基本操作（对算法整体一个全面的评价，但是无保证）
  
  我们关注算法的最坏情况！！！===》最坏时间复杂度
7.时间复杂度的几条基本计算规则
  基本操作，也就是只有常数项，认为其时间复杂度为O（1）
  顺序结构，时间复杂度按加法进行计算
  循环结构，时间复杂度按乘法进行计算
  分支：取最大值
  判断一个算法的效率时，只需要关注操作数量的最高次项，其他次要项和常数项可以忽略
  没有特殊情况下，我们分析的都是最坏时间复杂度

"""

# a = 0
# for i in range(0,1001):
#     a+=i
# print(a)
# n=1000
# print(n/2+n**2/2)
# print(n/2*n+n/2)
# import time
# def sum_of_n(n):
#     s = time.time()
#     the_sum = 0
#     for i in range(1,n+1):
#         the_sum = the_sum + i
#     time.sleep(1.3)
#     e = time.time()
    
#     return the_sum,"用时%s"%(e-s-1.3)
# print(sum_of_n(1000))


def get_min():
    n=[0,5,3,6,45,1,2]
    for i in range(0,len(n)):
        for j in range(0,len(n)):
            print(n[i],n[j)
            if n[i]<n[j]:
                print(n[i],n[j])
                n[i],n[j]=n[j],n[i]
    print(n)
    print(n[1])
get_min()
def get_min1():
    n = [0,2,3,45,6,61,4,5]
    